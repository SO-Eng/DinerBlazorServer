@page "/Order/Create"
@using Microsoft.Data.SqlClient
@inject IFoodData foodData
@inject IOrderData orderData


<h3>Create</h3>

<EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary Model="@order"/>  @*gives the Message back if wrong*@
    <div class="form-group">
        <label class="control-label">Item to Order</label>
        <select @bind="order.FoodId" class="form-control">
            <option value="0">Select a meal...</option>
            @foreach(var food in foodItems)
            {
                <option value="@food.Id">@food.Title</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label class="control-label">Quantity</label>
        <InputNumber @bind-Value="@order.Quantity" class="form-control" />
        <ValidationMessage For="@(() => order.Quantity)" class="text-danger" />
    </div>
    <div class="form-group">
        <label class="control-label">Name for the Order</label>
        <InputText @bind-Value="@order.OrderName" class="form-control" />
        <ValidationMessage For="@(() => order.OrderName)" class="text-danger" />
    </div>
    <div class="form-group">
        <input type="submit" value="Order Food" class="btn btn-primary"/>
    </div>
</EditForm>



@code {
    private OrderModel order = new OrderModel();
    private List<FoodModel> foodItems = new List<FoodModel>();

    protected override async Task OnParametersSetAsync()
    {
        foodItems = await foodData.GetFood();
    }

    private async Task HandleValidSubmit()
    {
        order.Total = order.Quantity * foodItems.Where(x => x.Id == order.FoodId).First().Price;

        int id = await orderData.CreateOrder(order);

        order = new OrderModel();
    }

}
